apply plugin: 'maven-publish'

configurations.all {
    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

def getRepoUserName() {
    return hasProperty('REPO_USERNAME') ? REPO_USERNAME : ''
}

def getRepoPassword() {
    return hasProperty('REPO_PASSWORD') ? REPO_PASSWORD : ''
}

def plugins = project.getPlugins()
if (plugins.hasPlugin('com.android.library')) {
/*    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.source
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        failOnError false
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }

    task sourcesJar(type: Jar) {
        archiveClassifier = 'sources'
        from android.sourceSets.main.java.source
    }*/
} else if (plugins.hasPlugin('java-library')) {
    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

afterEvaluate {
    def cleanTask = project.tasks.findByName('clean')
    def assembleTask = project.tasks.findByName('assemble')
    def publishTask = project.tasks.findByName('publish')
    if (cleanTask && assembleTask && publishTask) {
        assembleTask.dependsOn(cleanTask)
        publishTask.dependsOn(assembleTask)

        def publishLocalTask = project.tasks.findByName('publishToMavenLocal')
        if (publishLocalTask) {
            publishLocalTask.dependsOn(assembleTask)
        }
    }

    publishing {
        repositories {
            maven {
                allowInsecureProtocol = true
                url REPO_URL
                credentials {
                    username getRepoUserName()
                    password getRepoPassword()
                }
            }
        }

        publications {
            uploadArchives(MavenPublication) {
                
                if (components.hasWithName('java')) {
                    artifacts = [javadocJar, sourcesJar]
                    from components.java
                } else if (components.hasWithName('release')) {
                    from components.release
                }

                groupId = POM_GROUP_ID
                artifactId = POM_ARTIFACT_ID
                version = POM_VERSION
            }
        }
    }
}